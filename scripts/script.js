const prizes = [
    {
        text: "–°–¥–µ–ª–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑üéà",
        color: "hsl(197 30% 43%)",
    },

    { 
        text: "–í–Ω–µ–∑–∞–ø–Ω—ã–µ –æ–±—ä—è—Ç–∏—èüíï",
        color: "hsl(173 58% 39%)",
    },

    { 
        text: "–°–¥–µ–ª–∞—Ç—å —á–∞—ë–∫‚òï",
        color: "hsl(43 74% 66%)",
    },

    {
        text: "Hot coffeüòè",
        color: "hsl(27 87% 67%)",
    },

    {
        text: "–°–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂ü§ó",
        color: "hsl(12 76% 61%)",
    },

    {
        text: "–ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å!!!ü§†",
        color: "hsl(350 60% 52%)",
    }

];

const wheel = document.querySelector(".deal-wheel");
const spinner = wheel.querySelector(".spinner");
const trigger = wheel.querySelector(".btn-spin");
const ticker = wheel.querySelector(".ticker");

const prizeSlice = 360 / prizes.length;
const prizeOffset = Math.floor(180 / prizes.length);
const spinClass = "is-spinning";
const selectedClass = "selected";
const spinnerStyles = window.getComputedStyle(spinner);

let tickerAnim;
let rotation = 0; // —É–≥–æ–ª –≤—Ä–∞—â–µ–Ω–∏—è
let currentSlice = 0; // —Ç–µ–∫—É—â–∏–π —Å–µ–∫—Ç–æ—Ä
let prizeNodes; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π

// —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
const createPrizeNodes = () => {
    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å—å
    prizes.forEach(({ text, color, reaction }, i) => {
        // –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–≤–æ–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
        const rotation = ((prizeSlice * i) * -1) - prizeOffset;
        // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ spinner
        spinner.insertAdjacentHTML(
            "beforeend",
            // —Ç–µ–∫—Å—Ç –ø—Ä–∏ —ç—Ç–æ–º —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
            `<li class="prize" data-reaction=${reaction} style="--rotate: ${rotation}deg">
            <span class="text">${text}</span>
            </li>`
        );
    });
};

// —Ä–∏—Å—É–µ–º —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã
const createConicGradient = () => {
    // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è —É —ç–ª–µ–º–µ–Ω—Ç–∞ spinner
    spinner.setAttribute(
        "style",
        `background: conic-gradient(
            from -90deg,
            ${prizes
            // –ø–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
            .map(({ color }, i) => `${color} 0 ${(100 / prizes.length) * (prizes.length - i)}%`)
            .reverse()
            }
        );`
    );
};

// —Å–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–æ–ª–µ—Å–æ –≤ —Å–±–æ—Ä–µ
const setupWheel = () => {
    createConicGradient(); // —Å–Ω–∞—á–∞–ª–∞ —Å–µ–∫—Ç–æ—Ä—ã
    createPrizeNodes(); // –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç
    prizeNodes = wheel.querySelectorAll(".prize"); // –∞ –ø–æ—Ç–æ–º –º—ã –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏ –∫–∞–∫ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
};

setupWheel(); // –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–ø—É—Å–∫—É

// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å –ø–ª–∞–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
const spinertia = (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

// –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
trigger.addEventListener("click", () => {
    trigger.disabled = true; // –¥–µ–ª–∞–µ–º –µ—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è
    rotation = Math.floor(Math.random() * 360 + spinertia(2000, 5000)); // –∑–∞–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞
    prizeNodes.forEach((prize) => prize.classList.remove(selectedClass)); // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ—à–ª—ã–π –ø—Ä–∏–∑
    wheel.classList.add(spinClass); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–µ—Å—É –∫–ª–∞—Å—Å is-spinning, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ–∞–ª–∏–∑—É–µ–º –Ω—É–∂–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É
    spinner.style.setProperty("--rotate", rotation); // —á–µ—Ä–µ–∑ CSS –≥–æ–≤–æ—Ä–∏–º —Å–µ–∫—Ç–æ—Ä–∞–º, –∫–∞–∫ –∏–º –ø–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è
    ticker.style.animation = "none"; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã—á–æ–∫ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    runTickerAnimation();// –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏–µ
});

// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å –ø–ª–∞–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
const runTickerAnimation = () => {
    const values = spinnerStyles.transform.split("(")[1].split(")")[0].split(",");
    const a = values[0];
    const b = values[1];  
    let rad = Math.atan2(b, a);
    
    if (rad < 0) rad += (2 * Math.PI);
    
    const angle = Math.round(rad * (180 / Math.PI));
    const slice = Math.floor(angle / prizeSlice);

    if (currentSlice !== slice) {
    ticker.style.animation = "none";
    setTimeout(() => ticker.style.animation = null, 10);
        currentSlice = slice;
    }
    tickerAnim = requestAnimationFrame(runTickerAnimation);
};

// –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∞–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞
spinner.addEventListener("transitionend", () => {
    cancelAnimationFrame(tickerAnim); // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≤—Ä–∞—â–µ–Ω–∏—è
    rotation %= 360; // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å–∞
    selectPrize(); // –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑
    wheel.classList.remove(spinClass); // —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Ä–∞—â–µ–Ω–∏–µ
    spinner.style.setProperty("--rotate", rotation); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ CSS –Ω–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å–∞
    trigger.disabled = false; // –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
});

const BOT_TOKEN = "7352860769:AAHTENYUddgMQGLY5BYw6rSTgzZVKFBBQKY";
const CHAT_ID = "824020353";

const sendMessageToTelegram = (message) => {
    fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            chat_id: CHAT_ID,
            text: message,
        }),
    })
    .then((response) => {
        if (!response.ok) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", response.statusText);
        }
    })
    .catch((error) => console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", error));
};

const selectPrize = () => {
    const selected = Math.floor(rotation / prizeSlice);
    const prize = prizes[selected];

    prizeNodes[selected].classList.add(selectedClass);

    const message = `–¢–∞—Å—è –≤—ã–∏–≥—Ä–∞–ª–∞: ${prize.text}`;
    sendMessageToTelegram(message);
};
